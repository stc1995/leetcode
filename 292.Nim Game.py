#  对实际问题的抽象、分析，建立数学模型，然后转化为代码
#  此题倒着列
#
# step1
# 这是博弈论中极为经典的尼姆游戏。有总数为n的石头，每个人可以拿1~m个石头，两个人交替拿，拿到最后一个的人获胜。究竟是先手有利，还是后手有利？
# 1个石子，先手全部拿走；
# 2个石子，先手全部拿走；
# 3个石子，先手全部拿走；
# 4个石子，后手面对的是先手的第1，2，3情况，后手必胜；
# 5个石子，先手拿走1个让后手面对第4种情况，后手必败；
# 6个石子，先手拿走2个让后手面对第4种情况，后手必败；
# ……
# 容易看出来，只有当出现了4的倍数，先手无可奈何，其余情况先手都可以获胜。 （石子数量为4的倍数）
# 后手的获胜策略十分简单，每次取石子的数量，与上一次先手取石子的数量和为4即可； （石子数量不为4的倍数）先手的获胜策略也十分简单，
# 每次都令取之后剩余的石子数量为4的倍数（4*0=0，直接拿光），他就处于后手的位置上，利用上一行的策略获胜。
# step2
# 思路：
# 因为只能移动1、2、3块石头，所以只要对手最后拿的时候剩下4块石头，那无论他拿走几块石头，我都可以全部拿完，而之前每次拿石头，不管对手拿几个，
# 我都以凑够4个为目标拿。所以在我第一个拿石头的前提下，只要总数除以4有余数，我第一次拿余数即可保证对手最后一次拿之前只剩下4颗石头。
#step3
# 总结：该题难点不在代码，而是对实际问题的抽象、分析，建立数学模型，然后转化为代码的能力。再看代码，结果需要返回一个布尔值，通过if语句来判断，
# 如果满足余数为0，则不能保证取胜，返回布尔值false，如余数不为0，则返回布尔值true。
#
class Solution(object):
    def canWinNim(self, n):
        """
        :type n: int
        :rtype: bool
        """
        if n%4 == 0:
            return False
        else:
            return True

